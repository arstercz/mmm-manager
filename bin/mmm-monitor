#!/usr/bin/env perl
=pod

=head1 NAME

mmm-monitor - mysql muli master status monitor.

=head1 SYNOPSIS

Usage: mmm-monitor [OPTION...]

=head1 RISKS

=cut

# arstercz

use strict;
use warnings;
use Getopt::Long;
use Data::Dumper;
use Getopt::Long;
use Carp;
use Config::IniFiles;
use MMMM::Repl::dbh;
use MMMM::Repl::DBHelper;
use MMMM::Log::Record;
use MMMM::Monitor::Redis;
use English '-no_match_vars';

my($tag,$debug,$help);
my $redis = "127.0.0.1:6379";
my $conf  = "/etc/mmm-manager/mmm.conf";

GetOptions(
  "conf=s"   => \$conf,
  "debug!"   => \$debug,
  "tag=s"    => \$tag,
  "redis=s"  => \$redis,
  "help!"    => \$help,
) or die "error:$!";

if ($help) {
  system("perldoc -T $0");
  exit(0);
}

unless ($conf) {
  die "there is no conf options!";
}

unless ($tag) {
  die "must specify the --tag value!";
}

sub mysql_check {
  my($cfg, $sec) = @_;
  my $user         = $cfg->val($sec, "user");
  my $excludeuser  = $cfg->val($sec, "excludeuser");
  my $primaryhost  = $cfg->val($sec, "primaryhost");
  my $secondaryhost= $cfg->val($sec, "secondaryhost");
  my $password     = $cfg->val($sec, "password");
  my $database     = $cfg->val($sec, "database");
  my $charset      = $cfg->val($sec, "charset");
  my $timeout      = $cfg->val($sec, "connect_timeout");
  my $uniqsign     = $cfg->val($sec, "uniqsign");
  my $smode        = $cfg->val($sec, "servicemode");
  my $logfile      = $cfg->val($sec, "monitor_logfile");

  my $log = 
     MMMM::Log::Record->new(
       'filename' => "$logfile",
       'min_level'=> "debug",
       'mode'     => 'append',
     );
  
  my @masters = ($primaryhost, $secondaryhost);
  my %check_result = (
    masters      => [@masters],
    uniqsign     => $uniqsign,
    servicemode  => $smode,
    primaryhost  => $primaryhost,
    secondaryhost=> $secondaryhost,
    log          => $log,
  );
  
  my %host_status = ();

  foreach my $k (@masters) {
    my ($host, $port) = split(/:/, $k, 2);
    my $dbpre = MMMM::Repl::dbh->new(
      host     => $host,
      port     => $port,
      user     => $user,
      password => $password,
      charset  => $charset,
      driver   => 'mysql',
      timeout  => $timeout,
    );

    my $dbh = $dbpre->get_dbh($database, {AutoCommit => 1})
             or $log->error("Can't get dbh.. $host:$port");
    unless(defined $dbh) {
      $check_result{"$host:$port"} = {
          conn_nums => -1,
          delay_sec => -1,
          last_check => time(),
          ping => 0,
          read_only => -1,
          repl_check => 'Error',
        };
      next;
    }

    my $dbhelper     = MMMM::Repl::DBHelper->new(dbh => $dbh);

    $log->info("common check for $host:$port");
    my $common_check = 
       $dbhelper->get_common_info(excludeuser => $excludeuser);


    # check whether replication is ok
    if (grep {/$common_check->{masterhost}/} @masters) {
       $log->info("$k --> " . $common_check->{masterhost} . " ok.");
       $check_result{"$host:$port"} = $common_check;
    }
    else {
       $log->error($common_check->{masterhost} . " is not in $k!");
       return undef;
    }
  }

  return %check_result;
}

#SIG{'INT'} and SIG{'TERM'} should be ignored.
sub catch_sig {
  my $signame = shift;
  my $log = shift;
  $log->info("receive signal: $signame, skip...");
  if ($signame eq 'INT' or $signame eq 'TERM') {
    local $SIG{$signame} = 'IGNORE';
    return $SIG{$signame};
  }
}

# get database file handle.
$conf = "./$conf" if $conf && $conf =~ /^[^\/]/;

my $cfg = Config::IniFiles->new(-file => "$conf")
          or die "parse $conf error: $!";

my $logfile = 
    $cfg->val("log", "logfile") || "/tmp/$0.log";

my $log = 
   MMMM::Log::Record->new(
     'filename' => "$logfile",
     'min_level'=> "debug",
     'mode'     => 'append',
   );

$log->debug("generate log record...") if $debug;

# list all sections
my @secs = sort @{$cfg->{mysects}};
$log->debug("setcions: " . join(", ", @secs)) if $debug;

unless (grep {/$tag/} @secs) {
  $log->error("can not find $tag section");
  exit 1;
}

if ($cfg->val("redis", "host")) {
  $redis = $cfg->val("redis", "host");
  $log->info("get redis host: $redis");
}

my $redis_r = 
  MMMM::Monitor::Redis->new(
    server => "$redis",
    name   => sub { "mmm-monitor-$$" },
  );

my $interval = $cfg->val($tag, "interval") || 3;

while(1) {
  $SIG{INT} = sub { catch_sig("INT", $log) };
  $SIG{TERM}= sub { catch_sig("TERM", $log) };

  my %check_db = mysql_check($cfg, $tag);
  $redis_r->common_set(%check_db);
  $redis_r->status_set(%check_db);

  select(undef,undef,undef, $interval);
}

# ###################################################################
# Documentation.
# ###################################################################

=head1 OPTIONS

=over 4

=item conf

database, redis config file, default is /etc/mmm-manager/mmm.conf, eg:

  [mysql3308]
  database=information_schema
  primaryhost=10.0.21.5:3308
  secondaryhost=10.0.21.7:3308
  excludeuser=root, monitor, user_replica
  user=user_mmm
  password=xxxxxxxx
  uniqsign=8d9a4b2924dc40baa792d742cb786345
  servicemode=1
  charset=utf8
  connect_timeout=1
  interval=3
  try_times=2
  monitor_logfile=/var/log/mmm-manager/mmm-monitor-3308.log
  identify_logfile=/var/log/mmm-manager/mmm-identify-3308.log

  [redis]
  host=10.0.21.17:6379
  topic=mmm-switch-channel

  [log]
  logfile=/var/log/mmm-manager/mmm-monitor.log

=item tag

instance name from config file. such as mysql3308 with conf option.

=item redis

redis server, default is 127.0.0.1:6379

=item debug

whether print debug message or not.

=item help

print help info.

=back

=head1 AUTHOR

arstercz@gmail.com

=head1 CHANGELOG

v0.1.0 version

=cut
